from __future__ import annotations

import os
import uuid
import yaml
import json
import base64
import requests
from pathlib import Path
from typing import Final, Set, Dict, Any

from flask import Flask, jsonify, redirect, render_template, request, send_from_directory, url_for, session
from werkzeug.utils import secure_filename
from datetime import datetime, timedelta
from email.message import EmailMessage
import smtplib
import ssl
from markupsafe import Markup

from flask_login import (
    LoginManager,
    UserMixin,
    current_user,
    login_required,
    login_user,
    logout_user,
)
from flask_sqlalchemy import SQLAlchemy
from itsdangerous import BadSignature, SignatureExpired, URLSafeTimedSerializer
from werkzeug.security import check_password_hash, generate_password_hash
from sqlalchemy import inspect, text as sa_text, select

# ----------------------------------------------------------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ----------------------------------------------------------------------------

def load_config(config_path: str = "config.yaml") -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    with open(config_path, 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    return config

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
UPLOAD_FOLDER: Final[str] = config["upload"]["folder"]
ALLOWED_EXTENSIONS: Final[Set[str]] = set(config["upload"]["allowed_extensions"])
MAX_CONTENT_LENGTH: Final[int] = config["upload"]["max_content_length_mb"] * 1024 * 1024

# ----------------------------------------------------------------------------
# –†–∞—Å—à–∏—Ä–µ–Ω–∏—è
# ----------------------------------------------------------------------------

db = SQLAlchemy()
login_manager = LoginManager()
login_manager.login_view = "login"

# ----------------------------------------------------------------------------
# –ú–æ–¥–µ–ª–∏
# ----------------------------------------------------------------------------

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128), nullable=False)
    is_confirmed = db.Column(db.Boolean, default=False, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)

    def set_password(self, password: str) -> None:
        self.password_hash = generate_password_hash(password)

    def check_password(self, password: str) -> bool:
        return check_password_hash(self.password_hash, password)

class Upload(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    filename = db.Column(db.String(260), nullable=False)
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown
    ingredients_md = db.Column(db.Text, default="", nullable=False)
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON –æ—Ç –º–æ–¥–µ–ª–∏
    ingredients_json = db.Column(db.Text, nullable=True)
    # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ñ–∞–π–ª–∞ ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
    crc = db.Column(db.String(16), nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    user_id = db.Column(db.Integer, db.ForeignKey("user.id"), nullable=False)
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    nutrients_json = db.Column(db.Text, nullable=True)
    # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è chain-server
    job_id_analysis = db.Column(db.String(64), nullable=True)
    job_id_full = db.Column(db.String(64), nullable=True)

@login_manager.user_loader  # type: ignore
def load_user(user_id: str):
    return db.session.get(User, int(user_id))

# ----------------------------------------------------------------------------
# –ü–æ—á—Ç–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
# ----------------------------------------------------------------------------

def _send_confirmation_email(app: Flask, user: User) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""

    serializer = URLSafeTimedSerializer(app.config["SECRET_KEY"])
    token = serializer.dumps(user.email, salt="email-confirm-salt")
    confirm_url = url_for("confirm_email", token=token, _external=True)

    # –í –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É –≤ –ª–æ–≥.
    app.logger.info("–°—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è %s: %s", user.email, confirm_url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ SMTP
    try:
        msg = EmailMessage()
        msg["Subject"] = "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ Food Tracker"
        msg["From"] = app.config["MAIL_DEFAULT_SENDER"]
        msg["To"] = user.email

        # HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        html_content = f"""
        <html>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h2 style="color: #198754; margin: 0;">üçΩÔ∏è Food Tracker</h2>
                <p style="color: #6c757d; margin: 10px 0 0 0;">–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
            </div>

            <h3 style="color: #212529;">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</h3>

            <p style="color: #495057; line-height: 1.6;">
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!<br><br>
                –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Food Tracker.
                –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à email –∞–¥—Ä–µ—Å.
            </p>

            <div style="text-align: center; margin: 30px 0;">
                <a href="{confirm_url}"
                   style="background-color: #198754; color: white; padding: 12px 24px;
                          text-decoration: none; border-radius: 6px; font-weight: 500;
                          display: inline-block;">
                    –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å email
                </a>
            </div>

            <p style="color: #6c757d; font-size: 14px; line-height: 1.5;">
                –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—Ä–∞—É–∑–µ—Ä–∞:<br>
                <a href="{confirm_url}" style="color: #0d6efd; word-break: break-all;">{confirm_url}</a>
            </p>

            <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">

            <p style="color: #6c757d; font-size: 12px; margin: 0;">
                –≠—Ç–æ –ø–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ Food Tracker,
                –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
            </p>
        </body>
        </html>
        """

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
        text_content = f"""
        Food Tracker - –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏

        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

        –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ Food Tracker.
        –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤–∞—à email –∞–¥—Ä–µ—Å.

        –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:
        {confirm_url}

        –ï—Å–ª–∏ –≤—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ Food Tracker, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        """

        msg.set_content(text_content)
        msg.add_alternative(html_content, subtype='html')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        context = ssl.create_default_context()
        if app.config.get("MAIL_USE_SSL", True):
            with smtplib.SMTP_SSL(app.config["MAIL_SERVER"], app.config["MAIL_PORT"], context=context) as smtp:
                smtp.login(app.config["MAIL_USERNAME"], app.config["MAIL_PASSWORD"])
                smtp.send_message(msg)
        else:
            with smtplib.SMTP(app.config["MAIL_SERVER"], app.config["MAIL_PORT"]) as smtp:
                if app.config.get("MAIL_USE_TLS", True):
                    smtp.starttls(context=context)
                smtp.login(app.config["MAIL_USERNAME"], app.config["MAIL_PASSWORD"])
                smtp.send_message(msg)

        app.logger.info("–ü–∏—Å—å–º–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ %s", user.email)

    except Exception as e:
        app.logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è %s: %s", user.email, str(e))
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É (–ø–∏—Å—å–º–æ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ)

# -------------------- –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è --------------------

def _send_reset_email(app: Flask, user: User) -> None:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è."""

    serializer = URLSafeTimedSerializer(app.config["SECRET_KEY"])
    token = serializer.dumps(user.email, salt="password-reset-salt")
    reset_url = url_for("reset_password", token=token, _external=True)

    # –ü–æ–∫–∞ –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –≤—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É –≤ –ª–æ–≥
    app.logger.info("–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è %s: %s", user.email, reset_url)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —á–µ—Ä–µ–∑ SMTP
    try:
        msg = EmailMessage()
        msg["Subject"] = "–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - Food Tracker"
        msg["From"] = app.config["MAIL_DEFAULT_SENDER"]
        msg["To"] = user.email

        # HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
        html_content = f"""
        <html>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h2 style="color: #198754; margin: 0;">üçΩÔ∏è Food Tracker</h2>
                <p style="color: #6c757d; margin: 10px 0 0 0;">–ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò</p>
            </div>

            <h3 style="color: #212529;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h3>

            <p style="color: #495057; line-height: 1.6;">
                –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!<br><br>
                –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Food Tracker.
                –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.
            </p>

            <div style="text-align: center; margin: 30px 0;">
                <a href="{reset_url}"
                   style="background-color: #dc3545; color: white; padding: 12px 24px;
                          text-decoration: none; border-radius: 6px; font-weight: 500;
                          display: inline-block;">
                    –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
                </a>
            </div>

            <p style="color: #6c757d; font-size: 14px; line-height: 1.5;">
                –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∏ –≤—Å—Ç–∞–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é —Å—Å—ã–ª–∫—É –≤ –∞–¥—Ä–µ—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É –±—Ä–∞—É–∑–µ—Ä–∞:<br>
                <a href="{reset_url}" style="color: #0d6efd; word-break: break-all;">{reset_url}</a>
            </p>

            <div style="background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 6px; margin: 20px 0;">
                <p style="color: #856404; margin: 0; font-size: 14px;">
                    ‚ö†Ô∏è <strong>–í–∞–∂–Ω–æ:</strong> –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.
                    –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
                </p>
            </div>

            <hr style="border: none; border-top: 1px solid #dee2e6; margin: 30px 0;">

            <p style="color: #6c757d; font-size: 12px; margin: 0;">
                –≠—Ç–æ –ø–∏—Å—å–º–æ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
            </p>
        </body>
        </html>
        """

        # –¢–µ–∫—Å—Ç–æ–≤–∞—è –≤–µ—Ä—Å–∏—è –ø–∏—Å—å–º–∞
        text_content = f"""
        Food Tracker - –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è

        –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

        –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Food Tracker.
        –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ.

        –°—Å—ã–ª–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è:
        {reset_url}

        –í–ê–ñ–ù–û: –°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏.
        –ï—Å–ª–∏ –≤—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π—Ç–µ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        """

        msg.set_content(text_content)
        msg.add_alternative(html_content, subtype='html')

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
        context = ssl.create_default_context()
        if app.config.get("MAIL_USE_SSL", True):
            with smtplib.SMTP_SSL(app.config["MAIL_SERVER"], app.config["MAIL_PORT"], context=context) as smtp:
                smtp.login(app.config["MAIL_USERNAME"], app.config["MAIL_PASSWORD"])
                smtp.send_message(msg)
        else:
            with smtplib.SMTP(app.config["MAIL_SERVER"], app.config["MAIL_PORT"]) as smtp:
                if app.config.get("MAIL_USE_TLS", True):
                    smtp.starttls(context=context)
                smtp.login(app.config["MAIL_USERNAME"], app.config["MAIL_PASSWORD"])
                smtp.send_message(msg)

        app.logger.info("–ü–∏—Å—å–º–æ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ %s", user.email)

    except Exception as e:
        app.logger.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è %s: %s", user.email, str(e))
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É (–ø–∏—Å—å–º–æ —É–∂–µ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ)

# ----------------------------------------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# ----------------------------------------------------------------------------

def allowed_file(filename: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞."""
    return "." in filename and filename.rsplit(".", 1)[1].lower() in ALLOWED_EXTENSIONS


def _safe_pretty(obj: Any, max_len: int = 2000) -> str:
    try:
        if isinstance(obj, str):
            s = obj
        else:
            s = json.dumps(obj, ensure_ascii=False, indent=2)
    except Exception:
        s = str(obj)
    return s if len(s) <= max_len else s[:max_len] + "\n...[truncated]..."


def analyze_image_with_chain_server(image_path: str) -> Dict[str, Any]:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é chain-—Å–µ—Ä–≤–µ—Ä–∞."""
    chain_config = config.get("chain_server", {})

    chain_url = chain_config.get("url", "http://localhost:8000")
    analyze_endpoint = chain_config.get("analyze_endpoint", "/api/v1/analyze")
    analyze_full_endpoint = chain_config.get("analyze_full_endpoint", "/api/v1/analyze-full")
    timeout = chain_config.get("timeout", 30)

    # –í—ã–±–æ—Ä endpoint'–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ñ–ª–∞–≥–∞ single_request_mode
    features = config.get("features", {})
    single_request_mode = bool(features.get("single_request_mode", False))
    full_url = f"{chain_url}{(analyze_full_endpoint if single_request_mode else analyze_endpoint)}"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
    if not os.path.exists(image_path):
        return {
            "error": f"–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: {image_path}",
            "dishes": [],
            "confidence": 0.0
        }

    # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
    with open(image_path, "rb") as image_file:
        image_base64 = base64.b64encode(image_file.read()).decode('utf-8')

    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    payload = {
        "image_base64": image_base64,
        "filename": Path(image_path).name
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ chain-—Å–µ—Ä–≤–µ—Ä—É
    response = requests.post(
        full_url,
        json=payload,
        timeout=timeout,
        headers={"Content-Type": "application/json"}
    )

    if response.status_code == 200:
        result = response.json()
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å –æ—Ç–≤–µ—Ç–∞ chain-server, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        debug_conf = config.get("debug", {})
        if debug_conf.get("api_log", False):
            print("===== chain-server /analyze RAW response =====")
            print(_safe_pretty(result, int(debug_conf.get("max_print_chars", 2000))))
            print("===== /chain-server /analyze RAW response =====")
        print(json.dumps(result, indent=2, ensure_ascii=False))

        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω single_request_mode, —Å–µ—Ä–≤–µ—Ä –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {analysis, nutrients}
        if single_request_mode:
            return result
        else:
            # –£–±–∏—Ä–∞–µ–º –ø–æ–ª–µ error –µ—Å–ª–∏ –æ–Ω–æ None (—É—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
            if result.get("error") is None:
                result.pop("error", None)
            return result
    else:
        error_msg = f"–û—à–∏–±–∫–∞ chain-—Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"
        if response.headers.get("content-type") == "application/json":
            error_data = response.json()
            if "detail" in error_data:
                error_msg = error_data["detail"]

        return {
            "error": error_msg,
            "dishes": [],
            "confidence": 0.0
        }


# ----------------------------------------------------------------------------
# –§–∏–ª—å—Ç—Ä—ã Jinja
# ----------------------------------------------------------------------------

RUS_WEEKDAYS: Final[list[str]] = [
    "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
    "–í—Ç–æ—Ä–Ω–∏–∫",
    "–°—Ä–µ–¥–∞",
    "–ß–µ—Ç–≤–µ—Ä–≥",
    "–ü—è—Ç–Ω–∏—Ü–∞",
    "–°—É–±–±–æ—Ç–∞",
    "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
]


def _ru_weekday(value: datetime) -> str:  # pragma: no cover
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º."""
    return RUS_WEEKDAYS[value.weekday()]

def _format_datetime_ru(value: datetime) -> Markup:  # pragma: no cover
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É/–≤—Ä–µ–º—è –∫–∞–∫ '25.06.2025 (17:55)<br>–°—Ä–µ–¥–∞'."""
    return Markup(f"{value.strftime('%d.%m.%Y (%H:%M)')}<br>{_ru_weekday(value)}")


def _extract_dishes_only(ingredients_md_text: str) -> str:  # pragma: no cover
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞."""
    if not ingredients_md_text:
        return ""

    lines = ingredients_md_text.split('\n')
    dishes_section = []
    found_dishes = False

    for line in lines:
        # –ò—â–µ–º –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ –±–ª—é–¥
        if "–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞:" in line:
            found_dishes = True
            continue

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–µ–∫—Ü–∏—é –±–ª—é–¥, —Å–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –¥–æ –∫–æ–Ω—Ü–∞
        if found_dishes:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ –Ω–∞—á–∞–ª–µ —Å–µ–∫—Ü–∏–∏ –±–ª—é–¥
            if not dishes_section and not line.strip():
                continue
            dishes_section.append(line)

    # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –±–ª—é–¥ –Ω–∞–π–¥–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
    if dishes_section:
        return '\n'.join(dishes_section).strip()

    # –ï—Å–ª–∏ —Å–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å —Ü–∏—Ñ—Ä—ã
    dish_lines = []
    for line in lines:
        stripped = line.strip()
        if stripped and (stripped[0].isdigit() or stripped.startswith('_')):
            dish_lines.append(line)

    return '\n'.join(dish_lines) if dish_lines else ingredients_md_text

# ----------------------------------------------------------------------------
# –§–∞–±—Ä–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# ----------------------------------------------------------------------------

def _get_or_create_secret_key() -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π SECRET_KEY, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ –≤ instance/secret_key.txt.

    –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å ¬´remember me¬ª –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–º–∏
    –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: –µ—Å–ª–∏ –∫–ª—é—á –º–µ–Ω—è–µ—Ç—Å—è, –ø–æ–¥–ø–∏—Å—å cookies —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π.
    """

    instance_dir = Path(__file__).resolve().parent / "instance"
    instance_dir.mkdir(parents=True, exist_ok=True)
    key_path = instance_dir / "secret_key.txt"

    if key_path.exists():
        return key_path.read_text().strip()

    new_key = os.urandom(24).hex()
    key_path.write_text(new_key)
    return new_key

def create_app() -> Flask:
    app = Flask(__name__)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    database_config = config["database"]
    upload_config = config["upload"]
    security_config = config["security"]
    mail_config = config["mail"]

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    app_dir = Path(__file__).resolve().parent
    db_path = app_dir / "instance" / "app.db"
    database_url = f"sqlite:///{db_path}"

    app.config.update(
        UPLOAD_FOLDER=upload_config["folder"],
        MAX_CONTENT_LENGTH=upload_config["max_content_length_mb"] * 1024 * 1024,
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –ë–î
        SECRET_KEY=os.getenv("SECRET_KEY", security_config.get("secret_key") or _get_or_create_secret_key()),
        SQLALCHEMY_DATABASE_URI=os.getenv("DATABASE_URL", database_url),
        SQLALCHEMY_TRACK_MODIFICATIONS=database_config["track_modifications"],
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ cookie ¬´–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è¬ª
        REMEMBER_COOKIE_DURATION=timedelta(days=security_config["remember_cookie_duration_days"]),
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—á—Ç—ã (–º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã)
        MAIL_SERVER=os.getenv("MAIL_SERVER", mail_config["server"]),
        MAIL_PORT=int(os.getenv("MAIL_PORT", mail_config["port"])),
        MAIL_USERNAME=os.getenv("MAIL_USERNAME", mail_config["username"]),
        MAIL_PASSWORD=os.getenv("MAIL_PASSWORD", mail_config["password"]),
        MAIL_DEFAULT_SENDER=os.getenv("MAIL_DEFAULT_SENDER", mail_config["default_sender"]),
        MAIL_USE_TLS=mail_config.get("use_tls", True),
        MAIL_USE_SSL=mail_config.get("use_ssl", True),
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    db.init_app(app)
    login_manager.init_app(app)

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
    app.add_template_filter(_ru_weekday, name="ru_weekday")
    app.add_template_filter(_format_datetime_ru, name="ru_dt")
    app.add_template_filter(_extract_dishes_only, name="dishes_only")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∫–∞—Ç–∞–ª–æ–≥ –¥–ª—è –∑–∞–≥—Ä—É–∑–æ–∫ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    Path(app.config["UPLOAD_FOLDER"]).mkdir(parents=True, exist_ok=True)

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
    with app.app_context():
        db.create_all()

        # --- –ü—Ä–æ—Å—Ç–µ–π—à–∞—è –º–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Å—Ç–æ–ª–±—Ü—ã Upload ---
        engine = db.engine
        inspector = inspect(engine)

        upload_cols = {col["name"] for col in inspector.get_columns("upload")}
        alter_stmts: list[str] = []

        # –ú–∏–≥—Ä–∞—Ü–∏—è: –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è ingredients_md –∏ ingredients_json
        if "ingredients_md" not in upload_cols:
            alter_stmts.append("ALTER TABLE upload ADD COLUMN ingredients_md TEXT NOT NULL DEFAULT '';")
            # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–∞—Ä–æ–µ –ø–æ–ª–µ ingredients, –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            if "ingredients" in upload_cols:
                alter_stmts.append("UPDATE upload SET ingredients_md = ingredients;")

        if "ingredients_json" not in upload_cols:
            alter_stmts.append("ALTER TABLE upload ADD COLUMN ingredients_json TEXT;")

        if "crc" not in upload_cols:
            alter_stmts.append("ALTER TABLE upload ADD COLUMN crc VARCHAR(16) NOT NULL DEFAULT '';")

        if "nutrients_json" not in upload_cols:
            alter_stmts.append("ALTER TABLE upload ADD COLUMN nutrients_json TEXT;")
        # –ù–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á
        if "job_id_analysis" not in upload_cols:
            alter_stmts.append("ALTER TABLE upload ADD COLUMN job_id_analysis VARCHAR(64);")
        if "job_id_full" not in upload_cols:
            alter_stmts.append("ALTER TABLE upload ADD COLUMN job_id_full VARCHAR(64);")

        if alter_stmts:
            with engine.begin() as conn:
                for stmt in alter_stmts:
                    conn.execute(sa_text(stmt))

        # --- –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ email –≤ —Ç–∞–±–ª–∏—Ü–µ user
        try:
            with engine.begin() as conn:
                # –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏–∫–∞—Ç—ã email
                duplicate_check = conn.execute(sa_text("""
                    SELECT email, COUNT(*) as count
                    FROM user
                    GROUP BY email
                    HAVING COUNT(*) > 1
                """)).fetchall()

                if duplicate_check:
                    app.logger.warning(f"–ù–∞–π–¥–µ–Ω–æ {len(duplicate_check)} –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤")

                    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ email –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–∞–º—É—é —Å—Ç–∞—Ä—É—é –∑–∞–ø–∏—Å—å
                    for row in duplicate_check:
                        email = row[0]
                        app.logger.info(f"–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –¥–ª—è email: {email}")

                        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫—Ä–æ–º–µ —Å–∞–º–æ–π —Å—Ç–∞—Ä–æ–π (—Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º id)
                        conn.execute(sa_text("""
                            DELETE FROM user
                            WHERE email = :email
                            AND id NOT IN (
                                SELECT id FROM (
                                    SELECT MIN(id) as id
                                    FROM user
                                    WHERE email = :email
                                ) AS keeper
                            )
                        """), {"email": email})

                    app.logger.info("–î—É–±–ª–∏–∫–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ email –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ email
                    indexes = conn.execute(sa_text("PRAGMA index_list(user)")).fetchall()
                    email_unique_exists = False

                    for index in indexes:
                        index_name = index[1]  # –∏–º—è –∏–Ω–¥–µ–∫—Å–∞
                        is_unique = index[2]   # —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ª–∏

                        if is_unique:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏–Ω–¥–µ–∫—Å–∞
                            index_info = conn.execute(sa_text(f"PRAGMA index_info({index_name})")).fetchall()
                            for col_info in index_info:
                                if col_info[2] == 'email':  # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                                    email_unique_exists = True
                                    break

                    if not email_unique_exists:
                        app.logger.info("–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è email")
                        conn.execute(sa_text("CREATE UNIQUE INDEX IF NOT EXISTS ix_user_email_unique ON user (email)"))

                except Exception as idx_e:
                    app.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ email: {idx_e}")

        except Exception as e:
            app.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞

    # ---------------------------------------------------------------------
    # –†–æ—É—Ç—ã
    # ---------------------------------------------------------------------

    @app.get("/")
    @login_required
    def index():  # type: ignore
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—Ç—Ä–æ–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ ‚Üí —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤ —Å–µ—Å—Å–∏–∏ URL
        preload_url = request.args.get("image") or session.get("last_image", "")
        features = config.get("features", {})
        return render_template("index.html", preload_url=preload_url, features=features)

    @app.post("/upload")
    @login_required
    def upload():  # type: ignore
        """–ü—Ä–∏—ë–º —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ AJAX."""
        if not current_user.is_confirmed:
            return jsonify({"error": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email"}), 403

        if "file" not in request.files:
            return jsonify({"error": "–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 400

        file = request.files["file"]
        if file.filename == "":
            return jsonify({"error": "–ò–º—è —Ñ–∞–π–ª–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}), 400

        if not allowed_file(file.filename):
            return jsonify({"error": "–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç"}), 400

        # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –≤—ã—á–∏—Å–ª–∏—Ç—å CRC32. –§–∞–π–ª –Ω–µ–±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (‚â§16 –ú–ë).
        import zlib

        file_bytes = file.read()
        crc_value = f"{zlib.crc32(file_bytes) & 0xFFFFFFFF:08x}"
        # –ü–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è –ø–µ—Ä–µ–º–∞—Ç—ã–≤–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å, –∏–Ω–∞—á–µ save() –∑–∞–ø–∏—à–µ—Ç –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª.
        file.seek(0)

        filename = secure_filename(file.filename)
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–ª–ª–∏–∑–∏–π
        ext = filename.rsplit(".", 1)[1].lower()
        unique_name = f"{uuid.uuid4().hex}.{ext}"
        save_path = os.path.join(app.config["UPLOAD_FOLDER"], unique_name)
        file.save(save_path)

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ–∞–π–ª –∫ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        upload_record = Upload(
            filename=unique_name,
            user_id=current_user.id,
            crc=crc_value,
            ingredients_md="",  # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            ingredients_json=None,  # –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        )
        db.session.add(upload_record)
        db.session.commit()

        file_url = url_for("uploaded_file", filename=unique_name, _external=False)
        # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤ —Å–µ—Å—Å–∏–∏, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å–∞–π—Ç—É
        session["last_image"] = file_url
        return jsonify({"url": file_url, "upload_id": upload_record.id})

    @app.get("/uploads/<path:filename>")
    def uploaded_file(filename: str):  # type: ignore
        """–û—Ç–¥–∞—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."""
        return send_from_directory(app.config["UPLOAD_FOLDER"], filename)

    @app.post("/save_analysis")
    @login_required
    def save_analysis():  # type: ignore
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if not current_user.is_confirmed:
            return jsonify({"error": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email"}), 403

        data = request.get_json()
        if not data:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

        upload_id = data.get("upload_id")
        ingredients_md = data.get("ingredients_md", "")
        ingredients_json = data.get("ingredients_json")

        if not upload_id:
            return jsonify({"error": "ID –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400

        upload_record = db.get_or_404(Upload, upload_id)
        if upload_record.user_id != current_user.id:
            return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403

        upload_record.ingredients_md = ingredients_md
        if ingredients_json:
            upload_record.ingredients_json = json.dumps(ingredients_json, indent=2, ensure_ascii=False)
        # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ingredients_json –æ—á–∏—â–∞–µ–º nutrients_json
        upload_record.nutrients_json = None
        db.session.commit()

        return jsonify({"success": True})

    # ----------------------------- –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á -----------------------------

    def _chain_base_url_timeout() -> tuple[str, int]:
        chain_config = config.get("chain_server", {})
        chain_url = chain_config.get("url", "http://localhost:8000")
        timeout = chain_config.get("timeout", 45)
        return chain_url, timeout

    def _encode_image_to_base64(image_path: str) -> str:
        with open(image_path, "rb") as image_file:
            return base64.b64encode(image_file.read()).decode("utf-8")

    def _create_chain_job(image_path: str, filename: str, mode: str) -> tuple[bool, str | None, str | None]:
        """–°–æ–∑–¥–∞—ë—Ç –∑–∞–¥–∞—á—É –Ω–∞ chain‚Äëserver. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (ok, job_id, error_msg)."""
        chain_url, timeout = _chain_base_url_timeout()
        try:
            payload = {
                "image_base64": _encode_image_to_base64(image_path),
                "filename": filename,
                "params": {"mode": mode},
            }
            resp = requests.post(
                f"{chain_url}/api/v1/jobs",
                json=payload,
                timeout=timeout,
                headers={"Content-Type": "application/json"}
            )
            if resp.status_code == 200:
                data = resp.json()
                return True, data.get("job_id"), None
            try:
                data = resp.json()
                return False, None, data.get("detail") or f"HTTP {resp.status_code}"
            except Exception:
                return False, None, f"HTTP {resp.status_code}"
        except requests.RequestException as e:
            return False, None, str(e)

    def _fetch_job_status(job_id: str) -> dict[str, Any] | None:
        chain_url, timeout = _chain_base_url_timeout()
        try:
            resp = requests.get(f"{chain_url}/api/v1/jobs/{job_id}", timeout=timeout)
            if resp.status_code == 200:
                return resp.json()
            return None
        except requests.RequestException:
            return None

    def _maybe_ingest_job_result(upload_record: Upload) -> None:
        """–ï—Å–ª–∏ —É –∑–∞–≥—Ä—É–∑–∫–∏ –µ—Å—Ç—å job_id –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–¥—Ç—è–Ω—É—Ç—å –∏—Ö –∏–∑ chain‚Äëserver –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å."""
        job_id = upload_record.job_id_full or upload_record.job_id_analysis
        if not job_id:
            return
        # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω, –ø—Ä–æ–≤–µ—Ä–∏–º —Ç–æ–ª—å–∫–æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if upload_record.ingredients_json and upload_record.ingredients_md and not upload_record.job_id_full:
            return
        status = _fetch_job_status(job_id)
        if not status or status.get("status") != "done":
            return
        result = status.get("result") or {}

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        analysis_payload = result.get("analysis") or {}
        if analysis_payload and not (upload_record.ingredients_json and upload_record.ingredients_md):
            dishes = analysis_payload.get("dishes", [])
            confidence = analysis_payload.get("confidence", 0)
            md = f"**–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n"
            md += f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:.1%}\n\n"
            md += "**–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞:**\n\n"
            for i, dish in enumerate(dishes, 1):
                name = dish.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ")
                name_en = dish.get("name_en", "")
                unit_type = dish.get("unit_type", "")
                amount = dish.get("amount", 0)
                md += f"{i}. **{name}**"
                if name_en:
                    md += f" _{name_en}_"
                if unit_type and amount:
                    if unit_type == "—à—Ç—É–∫":
                        md += f" ‚Äî {amount:.0f} {unit_type}"
                    else:
                        md += f" ‚Äî {amount} {unit_type}"
                md += "\n\n"

            upload_record.ingredients_md = md
            upload_record.ingredients_json = json.dumps(analysis_payload, indent=2, ensure_ascii=False)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        if upload_record.job_id_full and not upload_record.nutrients_json:
            nutrients = result.get("nutrients")
            if nutrients and nutrients.get("dishes") is not None:
                nutrients_data = []
                # –ë–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ –±–ª—é–¥ –∏–∑ analysis, —á—Ç–æ–±—ã —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å
                analysis_json = {}
                try:
                    if upload_record.ingredients_json:
                        analysis_json = json.loads(upload_record.ingredients_json)
                except json.JSONDecodeError:
                    analysis_json = {}
                dishes_list = analysis_json.get("dishes", []) if isinstance(analysis_json, dict) else []
                for i, dish_result in enumerate(nutrients.get("dishes", [])):
                    corresponding_dish = dishes_list[i] if i < len(dishes_list) else {}
                    nutrients_entry = {
                        "dish": corresponding_dish.get("name_en") or corresponding_dish.get("name") or f"–ë–ª—é–¥–æ {i+1}",
                        "amount": corresponding_dish.get("amount", 100),
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–¥–∏–Ω–∏—Ü—É —Ç–∞–∫, –∫–∞–∫ –µ—Å—Ç—å –≤ –∞–Ω–∞–ª–∏–∑–µ (—Ä—É—Å.) ‚Äî UI –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç
                        "unit": corresponding_dish.get("unit_type", "–≥—Ä–∞–º–º"),
                        "nutrients": dish_result,
                        "analyzed_at": datetime.utcnow().isoformat()
                    }
                    nutrients_data.append(nutrients_entry)
                upload_record.nutrients_json = json.dumps(nutrients_data, indent=2, ensure_ascii=False)

        db.session.commit()

    @app.post("/queue_analysis")
    @login_required
    def queue_analysis():  # type: ignore
        if not current_user.is_confirmed:
            return jsonify({"error": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email"}), 403
        data = request.get_json() or {}
        upload_id = data.get("upload_id")
        if not upload_id:
            return jsonify({"error": "ID –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400
        upload_record = db.get_or_404(Upload, upload_id)
        if upload_record.user_id != current_user.id:
            return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403
        image_path = os.path.join(app.config["UPLOAD_FOLDER"], upload_record.filename)
        if not os.path.exists(image_path):
            return jsonify({"error": "–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        ok, job_id, err = _create_chain_job(image_path, upload_record.filename, mode="analysis")
        if not ok or not job_id:
            return jsonify({"error": err or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"}), 500
        upload_record.job_id_analysis = job_id
        db.session.commit()
        return jsonify({"queued": True, "job_id": job_id, "message": "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∑–∂–µ."})

    @app.post("/queue_nutrients")
    @login_required
    def queue_nutrients():  # type: ignore
        if not current_user.is_confirmed:
            return jsonify({"error": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email"}), 403
        data = request.get_json() or {}
        upload_id = data.get("upload_id")
        if not upload_id:
            return jsonify({"error": "ID –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400
        upload_record = db.get_or_404(Upload, upload_id)
        if upload_record.user_id != current_user.id:
            return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403
        image_path = os.path.join(app.config["UPLOAD_FOLDER"], upload_record.filename)
        if not os.path.exists(image_path):
            return jsonify({"error": "–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        ok, job_id, err = _create_chain_job(image_path, upload_record.filename, mode="full")
        if not ok or not job_id:
            return jsonify({"error": err or "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"}), 500
        upload_record.job_id_full = job_id
        db.session.commit()
        return jsonify({"queued": True, "job_id": job_id, "message": "–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–∑–∂–µ."})

    @app.get("/get_analysis/<path:filename>")
    @login_required
    def get_analysis(filename: str):  # type: ignore
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
        upload_record = db.first_or_404(
            select(Upload).filter_by(
                filename=filename,
                user_id=current_user.id
            )
        )

        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–¥–∞—á (–µ—Å–ª–∏ –≥–æ—Ç–æ–≤—ã), –∑–∞—Ç–µ–º —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            _maybe_ingest_job_result(upload_record)
        except Exception as _:
            pass

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º JSON –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å (–ø–æ—Å–ª–µ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        ingredients_json = None
        if upload_record.ingredients_json:
            ingredients_json = json.loads(upload_record.ingredients_json)

        nutrients_json = None
        if upload_record.nutrients_json:
            nutrients_json = json.loads(upload_record.nutrients_json)

        # –ü–æ–ª—É—á–∏–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –∑–∞–¥–∞—á, –µ—Å–ª–∏ –µ—Å—Ç—å
        job_status_analysis = None
        job_status_full = None
        if upload_record.job_id_analysis:
            status = _fetch_job_status(upload_record.job_id_analysis)
            job_status_analysis = status.get("status") if status else None
        if upload_record.job_id_full:
            status = _fetch_job_status(upload_record.job_id_full)
            job_status_full = status.get("status") if status else None

        return jsonify({
            "ingredients_md": upload_record.ingredients_md,
            "ingredients_json": ingredients_json,
            "nutrients_json": nutrients_json,
            "upload_id": upload_record.id,
            "job_id_analysis": upload_record.job_id_analysis,
            "job_id_full": upload_record.job_id_full,
            "job_status_analysis": job_status_analysis,
            "job_status_full": job_status_full
        })

    @app.post("/analyze_image")
    @login_required
    def analyze_image():  # type: ignore
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é chain-—Å–µ—Ä–≤–µ—Ä–∞."""
        if not current_user.is_confirmed:
            return jsonify({"error": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email"}), 403

        data = request.get_json()
        if not data:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

        upload_id = data.get("upload_id")
        if not upload_id:
            return jsonify({"error": "ID –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"}), 400

        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å –æ –∑–∞–≥—Ä—É–∑–∫–µ
        upload_record = db.get_or_404(Upload, upload_id)
        if upload_record.user_id != current_user.id:
            return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403

        # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É
        image_path = os.path.join(app.config["UPLOAD_FOLDER"], upload_record.filename)

        if not os.path.exists(image_path):
            return jsonify({"error": "–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ chain-—Å–µ—Ä–≤–µ—Ä
        chain_config = config.get("chain_server", {})
        chain_url = chain_config.get("url", "http://localhost:8000")

        health_response = requests.get(f"{chain_url}/api/v1/health", timeout=5)
        if health_response.status_code != 200:
            return jsonify({"error": "Chain-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503

        health_data = health_response.json()
        if not health_data.get("image_analyzer_ready"):
            return jsonify({"error": "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –≥–æ—Ç–æ–≤"}), 503

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ chain-—Å–µ—Ä–≤–µ—Ä (–≤–æ–∑–º–æ–∂–µ–Ω –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑)
        analysis_result = analyze_image_with_chain_server(image_path)
        debug_conf = config.get("debug", {})
        if debug_conf.get("api_log", False):
            print("===== chain-server /analyze processed result =====")
            print(_safe_pretty(analysis_result, int(debug_conf.get("max_print_chars", 2000))))
            print("===== /chain-server /analyze processed result =====")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        error_msg = analysis_result.get("error")
        if error_msg:
            return jsonify({
                "success": False,
                "error": error_msg
            }), 500

        # –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
        features = config.get("features", {})
        single_request_mode = bool(features.get("single_request_mode", False))

        # –í —Ä–µ–∂–∏–º–µ single_request_mode API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {analysis, nutrients}
        analysis_payload = analysis_result.get("analysis") if single_request_mode else analysis_result

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤ markdown —Ñ–æ—Ä–º–∞—Ç–µ
        dishes = analysis_payload.get("dishes", [])
        confidence = analysis_payload.get("confidence", 0)

        ingredients_text = f"**–†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:**\n\n"
        ingredients_text += f"**–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:** {confidence:.1%}\n\n"
        ingredients_text += "**–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞:**\n\n"

        for i, dish in enumerate(dishes, 1):
            name = dish.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ")
            name_en = dish.get("name_en", "")
            description = dish.get("description", "")
            description_en = dish.get("description_en", "")
            unit_type = dish.get("unit_type", "")
            amount = dish.get("amount", 0)

            # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ingredients_text += f"{i}. **{name}**"
            if name_en:
                ingredients_text += f" _{name_en}_"

            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –µ–¥–∏–Ω–∏—Ü—ã
            if unit_type and amount:
                if unit_type == "—à—Ç—É–∫":
                    ingredients_text += f" ‚Äî {amount:.0f} {unit_type}"
                else:
                    ingredients_text += f" ‚Äî {amount} {unit_type}"

            ingredients_text += "\n"

            # –û–ø–∏—Å–∞–Ω–∏–µ
            if description:
                ingredients_text += f"   _{description}_"
                if description_en:
                    ingredients_text += f" _{description_en}_"
                ingredients_text += "\n"

            ingredients_text += "\n"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        upload_record.ingredients_md = ingredients_text
        upload_record.ingredients_json = json.dumps(analysis_payload, indent=2, ensure_ascii=False)
        # –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ ingredients_json –æ—á–∏—â–∞–µ–º nutrients_json
        upload_record.nutrients_json = None
        db.session.commit()

        if single_request_mode:
            return jsonify({
                "success": True,
                "analysis": analysis_payload,
                "nutrients": analysis_result.get("nutrients", {}),
                "formatted_text": ingredients_text
            })
        else:
            return jsonify({
                "success": True,
                "analysis": analysis_payload,
                "formatted_text": ingredients_text
            })

    @app.post("/analyze_nutrients")
    @login_required
    def analyze_nutrients():  # type: ignore
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–ª—é–¥ —á–µ—Ä–µ–∑ chain-—Å–µ—Ä–≤–µ—Ä.
        –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ –æ–¥–Ω–æ –±–ª—é–¥–æ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏), —Ç–∞–∫ –∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞.
        """
        if not current_user.is_confirmed:
            return jsonify({"error": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email"}), 403

        data = request.get_json()
        if not data:
            return jsonify({"error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"}), 400

        upload_id = data.get("upload_id")

        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Å—Ç–∞—Ä—ã–π (–æ–¥–Ω–æ –±–ª—é–¥–æ) –∏ –Ω–æ–≤—ã–π (–º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞)
        dishes_list = []
        is_single_dish_request = False  # –§–ª–∞–≥ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞

        if "dishes" in data:
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞
            dishes_data = data["dishes"]
            if not isinstance(dishes_data, list):
                return jsonify({"error": "–ü–æ–ª–µ 'dishes' –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–ø–∏—Å–∫–æ–º"}), 400

            for dish_item in dishes_data:
                if not isinstance(dish_item, dict):
                    return jsonify({"error": "–ö–∞–∂–¥–æ–µ –±–ª—é–¥–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º"}), 400

                dish_name = dish_item.get("dish", "").strip()
                if not dish_name:
                    return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞"}), 400

                dishes_list.append({
                    "dish": dish_name,
                    "amount": dish_item.get("amount", 100),
                    "unit": dish_item.get("unit", "gram")
                })
        else:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –æ–¥–Ω–æ –±–ª—é–¥–æ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            dish = data.get("dish")
            amount = data.get("amount", 100)
            unit = data.get("unit", "–≥—Ä–∞–º–º")

            if not dish:
                return jsonify({"error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –±–ª—é–¥–æ"}), 400

            dishes_list.append({
                "dish": dish,
                "amount": amount,
                "unit": unit
            })
            is_single_dish_request = True

        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω upload_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        upload_record = None
        if upload_id:
            upload_record = db.get_or_404(Upload, upload_id)
            if upload_record.user_id != current_user.id:
                return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ chain-—Å–µ—Ä–≤–µ—Ä–∞
        chain_config = config.get("chain_server", {})
        chain_url = chain_config.get("url", "http://localhost:8000")
        timeout = chain_config.get("timeout", 45)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞

        # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω single_request_mode, —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ä–∞—Å—á—ë—Ç–∞,
        # –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–∂–Ω–∏–º.

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ chain-—Å–µ—Ä–≤–µ—Ä
        try:
            health_response = requests.get(f"{chain_url}/api/v1/health", timeout=5)
            if health_response.status_code != 200:
                return jsonify({"error": "Chain-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503

            health_data = health_response.json()
            if not health_data.get("nutrients_analyzer_ready"):
                return jsonify({"error": "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –Ω–µ –≥–æ—Ç–æ–≤"}), 503
        except requests.RequestException:
            return jsonify({"error": "Chain-—Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"}), 503

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ (–æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è –≤—Å–µ—Ö –±–ª—é–¥)
        try:
            response = requests.post(
                f"{chain_url}/api/v1/analyze-multiple-nutrients",
                json={"dishes": dishes_list},
                timeout=timeout,
                headers={"Content-Type": "application/json"}
            )

            if response.status_code == 200:
                result = response.json()
                debug_conf = config.get("debug", {})
                if debug_conf.get("api_log", False):
                    print("===== chain-server /analyze-multiple-nutrients RAW response =====")
                    print(_safe_pretty(result, int(debug_conf.get("max_print_chars", 2000))))
                    print("===== /chain-server /analyze-multiple-nutrients RAW response =====")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω upload_id
                if upload_record:
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –Ω–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    upload_record.nutrients_json = None

                    if not result.get("error") and result.get("dishes"):
                        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                        nutrients_data = []
                        for i, dish_result in enumerate(result["dishes"]):
                            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É
                            # –ü–æ—Å–∫–æ–ª—å–∫—É –ø–æ—Ä—è–¥–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–∫—É –∑–∞–ø—Ä–æ—Å–∞
                            if i < len(dishes_list):
                                corresponding_dish = dishes_list[i]
                            else:
                                # –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±–æ–ª—å—à–µ —á–µ–º –±–ª—é–¥ –≤ –∑–∞–ø—Ä–æ—Å–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±–ª—é–¥–æ
                                corresponding_dish = dishes_list[-1] if dishes_list else None

                            nutrients_entry = {
                                "dish": corresponding_dish["dish"] if corresponding_dish else "Unknown",
                                "amount": corresponding_dish["amount"] if corresponding_dish else 100,
                                "unit": corresponding_dish["unit"] if corresponding_dish else "gram",
                                "nutrients": {
                                    "dish_name": dish_result.get("dish_name", ""),
                                    "calories": dish_result.get("calories", 0),
                                    "protein": dish_result.get("protein", 0),
                                    "fat": dish_result.get("fat", 0),
                                    "carbohydrates": dish_result.get("carbohydrates", 0),
                                    "fiber": dish_result.get("fiber", 0)
                                },
                                "analyzed_at": datetime.utcnow().isoformat()
                            }

                            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª—é–¥–∞, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                            if "error" in dish_result:
                                nutrients_entry["nutrients"]["error"] = dish_result["error"]

                            nutrients_data.append(nutrients_entry)

                        upload_record.nutrients_json = json.dumps(nutrients_data, indent=2, ensure_ascii=False)
                        db.session.commit()

                # –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏: –µ—Å–ª–∏ –±—ã–ª –∑–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ –±–ª—é–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if is_single_dish_request:
                    if result.get("dishes") and len(result["dishes"]) > 0:
                        single_result = result["dishes"][0]
                        return jsonify(single_result)
                    else:
                        return jsonify({"error": result.get("error", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–ª—é–¥–æ")})

                # –î–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–ª—é–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if debug_conf.get("api_log", False):
                    print("===== chain-server /analyze-multiple-nutrients processed result =====")
                    print(_safe_pretty(result, int(debug_conf.get("max_print_chars", 2000))))
                    print("===== /chain-server /analyze-multiple-nutrients processed result =====")
                return jsonify(result)
            else:
                error_msg = f"–û—à–∏–±–∫–∞ chain-—Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}"
                if response.headers.get("content-type") == "application/json":
                    try:
                        error_data = response.json()
                        if "detail" in error_data:
                            error_msg = error_data["detail"]
                    except:
                        pass

                return jsonify({"error": error_msg}), 500

        except requests.RequestException as e:
            return jsonify({"error": f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}"}), 500

    @app.get("/get_nutrients/<int:upload_id>")
    @login_required
    def get_nutrients(upload_id: int):  # type: ignore
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–∞—Ö –ø–æ upload_id."""
        upload_record = db.get_or_404(Upload, upload_id)
        if upload_record.user_id != current_user.id:
            return jsonify({"error": "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"}), 403

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–¥—Ç—è–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–¥–∞—á–∏, –∑–∞—Ç–µ–º —á–∏—Ç–∞–µ–º –∏–∑ –º–æ–¥–µ–ª–∏
        try:
            _maybe_ingest_job_result(upload_record)
        except Exception as _:
            pass

        nutrients_json = None
        if upload_record.nutrients_json:
            nutrients_json = json.loads(upload_record.nutrients_json)

        job_status_full = None
        if upload_record.job_id_full:
            status = _fetch_job_status(upload_record.job_id_full)
            job_status_full = status.get("status") if status else None

        return jsonify({
            "nutrients_json": nutrients_json,
            "upload_id": upload_record.id,
            "job_id_full": upload_record.job_id_full,
            "job_status_full": job_status_full
        })

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ 413 ‚Äî –ø—Ä–µ–≤—ã—à–µ–Ω —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    @app.errorhandler(413)
    def file_too_large(_: Exception):  # type: ignore
        return jsonify({"error": "–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π"}), 413

    # ---------------------- –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ------------------------------

    @app.route("/register", methods=["GET", "POST"])
    def register():  # type: ignore
        if current_user.is_authenticated:
            return redirect(url_for("index"))

        if request.method == "POST":
            email = request.form.get("email", "").strip().lower()
            password = request.form.get("password", "")

            if not email or not password:
                return render_template("register.html", error="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")

            if db.session.execute(select(User).filter_by(email=email)).first():
                return render_template("register.html", error="Email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")

            user = User(email=email)
            user.set_password(password)
            db.session.add(user)
            db.session.commit()
            _send_confirmation_email(app, user)
            return render_template("register.html", success="–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

        return render_template("register.html")

    @app.route("/confirm/<token>")
    def confirm_email(token: str):  # type: ignore
        serializer = URLSafeTimedSerializer(app.config["SECRET_KEY"])
        try:
            email = serializer.loads(token, salt="email-confirm-salt", max_age=3600)
        except (BadSignature, SignatureExpired):
            return "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞", 400

        user_row = db.session.execute(select(User).filter_by(email=email)).first()
        if not user_row:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
        user = user_row[0]
        if not user.is_confirmed:
            user.is_confirmed = True
            db.session.commit()
        return render_template("confirm.html")

    @app.route("/login", methods=["GET", "POST"])
    def login():  # type: ignore
        if current_user.is_authenticated:
            return redirect(url_for("index"))

        # –ï—Å–ª–∏ email –ø–µ—Ä–µ–¥–∞–Ω query-string'–æ–º (–ø–æ—Å–ª–µ logout), –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, —á—Ç–æ–±—ã
        # –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Ñ–æ—Ä–º—É —Å –æ–¥–Ω–∏–º –ø–æ–ª–µ–º –ø–∞—Ä–æ–ª—è.
        prefilled_email = request.args.get("email", "")

        if request.method == "POST":
            # email –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –∫–∞–∫ —Å–∫—Ä—ã—Ç–æ–µ –ø–æ–ª–µ, –ø–æ—ç—Ç–æ–º—É –±–µ—Ä—ë–º –∏–∑ —Ñ–æ—Ä–º—ã
            email = request.form.get("email", "").strip().lower()
            password = request.form.get("password", "")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º first() –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –≤–æ–∑–º–æ–∂–Ω—ã–º –¥—É–±–ª–∏–∫–∞—Ç–∞–º
            user_row = db.session.execute(select(User).filter_by(email=email)).first()
            user = user_row[0] if user_row else None

            if user and user.check_password(password):
                if not user.is_confirmed:
                    return render_template(
                        "login.html",
                        error="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º",
                        prefilled_email=prefilled_email or email,
                    )

                # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ–≥–¥–∞ –Ω–∞ 7 –¥–Ω–µ–π
                login_user(user, remember=True)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å)
                last_upload_row = db.session.execute(
                    select(Upload)
                    .filter_by(user_id=user.id)
                    .order_by(Upload.created_at.desc())
                ).first()
                last_upload = last_upload_row[0] if last_upload_row else None
                if last_upload:
                    session["last_image"] = url_for(
                        "uploaded_file", filename=last_upload.filename, _external=False
                    )
                else:
                    session.pop("last_image", None)

                return redirect(url_for("index"))

            return render_template(
                "login.html",
                error="–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á—ë—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                prefilled_email=prefilled_email or email,
            )

        return render_template("login.html", prefilled_email=prefilled_email)

    @app.get("/logout")
    @login_required
    def logout():  # type: ignore
        logout_user()
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–µ –æ—á–∏—â–∞—è –≤–µ—Å—å –æ–±—ä–µ–∫—Ç session,
        # –∏–Ω–∞—á–µ Flask-Login –Ω–µ —Å–º–æ–∂–µ—Ç –≤—ã—Å—Ç–∞–≤–∏—Ç—å cookie —Å –æ—á–∏—Å—Ç–∫–æ–π ¬´remember me¬ª.
        session.pop("last_image", None)
        return redirect(url_for("login"))

    # ---------------------- –ò—Å—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫ -----------------------------

    @app.get("/history")
    @login_required
    def history():  # type: ignore
        """–¢–∞–±–ª–∏—Ü–∞ —Å —Ä–∞–Ω–µ–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        uploads = db.session.execute(
            select(Upload)
            .filter_by(user_id=current_user.id)
            .order_by(Upload.created_at.desc())
        ).scalars().all()
        return render_template("history.html", uploads=uploads)

    @app.get("/nutrition_stats")
    @login_required
    def nutrition_stats():  # type: ignore
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –ø–æ –¥–Ω—è–º –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü."""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü —Å –∞–Ω–∞–ª–∏–∑–æ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
        month_ago = datetime.utcnow() - timedelta(days=30)
        uploads = db.session.execute(
            select(Upload)
            .filter(
                Upload.user_id == current_user.id,
                Upload.created_at >= month_ago,
                Upload.nutrients_json.isnot(None),
                Upload.nutrients_json != ""
            )
            .order_by(Upload.created_at.desc())
        ).scalars().all()

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º –∏ —Å—É–º–º–∏—Ä—É–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã
        daily_stats = {}

        for upload in uploads:
            try:
                nutrients_data = json.loads(upload.nutrients_json)
                if not isinstance(nutrients_data, list):
                    continue

                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
                upload_date = upload.created_at.date()
                date_str = upload_date.strftime('%Y-%m-%d')

                if date_str not in daily_stats:
                    daily_stats[date_str] = {
                        'date': upload_date,
                        'calories': 0,
                        'protein': 0,
                        'fat': 0,
                        'carbohydrates': 0,
                        'fiber': 0,
                        'uploads_count': 0
                    }

                daily_stats[date_str]['uploads_count'] += 1

                # –°—É–º–º–∏—Ä—É–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã –ø–æ –≤—Å–µ–º –±–ª—é–¥–∞–º –≤ –∑–∞–≥—Ä—É–∑–∫–µ
                for dish_data in nutrients_data:
                    nutrients = dish_data.get('nutrients', {})
                    daily_stats[date_str]['calories'] += nutrients.get('calories', 0)
                    daily_stats[date_str]['protein'] += nutrients.get('protein', 0)
                    daily_stats[date_str]['fat'] += nutrients.get('fat', 0)
                    daily_stats[date_str]['carbohydrates'] += nutrients.get('carbohydrates', 0)
                    daily_stats[date_str]['fiber'] += nutrients.get('fiber', 0)

            except (json.JSONDecodeError, TypeError, KeyError):
                continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        sorted_stats = sorted(daily_stats.values(), key=lambda x: x['date'], reverse=True)

        return render_template("nutrition_stats.html", daily_stats=sorted_stats)

    @app.get("/use/<int:upload_id>")
    @login_required
    def use_upload(upload_id: int):  # type: ignore
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º."""
        upload_rec = db.get_or_404(Upload, upload_id)
        if upload_rec.user_id != current_user.id:
            return "Forbidden", 403

        image_url = url_for("uploaded_file", filename=upload_rec.filename, _external=False)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é ‚Äî –≤—ã–±—Ä–∞–Ω –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ñ–∞–π–ª
        session["last_image"] = image_url
        return redirect(url_for("index", image=image_url))

    @app.get("/delete/<int:upload_id>")
    @login_required
    def delete_upload(upload_id: int):  # type: ignore
        """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏ —Å–∞–º —Ñ–∞–π–ª (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)."""
        upload_rec = db.get_or_404(Upload, upload_id)
        if upload_rec.user_id != current_user.id:
            return "Forbidden", 403

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        file_path = os.path.join(app.config["UPLOAD_FOLDER"], upload_rec.filename)
        if os.path.exists(file_path):
            os.remove(file_path)

        db.session.delete(upload_rec)
        db.session.commit()

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–∏–ª —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–ª—Å—è –≤ –ø—Ä–µ–≤—å—é ‚Äî –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é
        image_url = url_for("uploaded_file", filename=upload_rec.filename, _external=False)
        if session.get("last_image") == image_url:
            session.pop("last_image", None)

        return redirect(url_for("history"))

    @app.route("/forgot", methods=["GET", "POST"])
    def forgot_password():  # type: ignore
        """–§–æ—Ä–º–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å—Å—ã–ª–∫–∏ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è."""
        if current_user.is_authenticated:
            return redirect(url_for("index"))

        message: str | None = None
        if request.method == "POST":
            email = request.form.get("email", "").strip().lower()
            # –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ email
            user_row = db.session.execute(select(User).filter_by(email=email)).first()
            user = user_row[0] if user_row else None
            if user:
                _send_reset_email(app, user)
            # –°–æ–æ–±—â–∞–µ–º –æ–¥–Ω–æ—Ç–∏–ø–Ω–æ
            message = "–ï—Å–ª–∏ —Ç–∞–∫–æ–π email –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è."
        return render_template("forgot.html", message=message)

    @app.route("/reset/<token>", methods=["GET", "POST"])
    def reset_password(token: str):  # type: ignore
        """–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É."""
        serializer = URLSafeTimedSerializer(app.config["SECRET_KEY"])
        try:
            email = serializer.loads(token, salt="password-reset-salt", max_age=3600)
        except (BadSignature, SignatureExpired):
            return "–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞", 400

        user_row = db.session.execute(select(User).filter_by(email=email)).first()
        if not user_row:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", 404
        user = user_row[0]

        success: str | None = None
        error: str | None = None

        if request.method == "POST":
            password = request.form.get("password", "")
            confirm = request.form.get("confirm", "")
            if not password or not confirm:
                error = "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±–∞ –ø–æ–ª—è"
            elif password != confirm:
                error = "–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç"
            else:
                user.set_password(password)
                db.session.commit()
                success = "–ü–∞—Ä–æ–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏."
        return render_template("reset.html", error=error, success=success)

    return app


# ----------------------------------------------------------------------------
# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
# ----------------------------------------------------------------------------

if __name__ == "__main__":
    # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π –æ—Ç–ª–∞–¥–∫–∏. –í –ø—Ä–æ–¥–µ –≤–º–µ—Å—Ç–æ debug=True ‚Äî –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä.
    server_config = config["server"]
    create_app().run(
        host=server_config["host"],
        port=server_config["port"],
        debug=server_config["debug"]
    )