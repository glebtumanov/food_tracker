"""
LangServe —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ–¥—ã –∏ —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤.

–°–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
1. –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ–¥—ã (–º–æ–¥–µ–ª—å image_recognition_model)
2. –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ —á–µ—Ä–µ–∑ Edamam API (–º–æ–¥–µ–ª—å analyze_nutrients_model)

–ó–∞–ø—É—Å–∫: python server.py
"""

import os
import base64
import yaml
import logging
import time
from typing import Dict, Any
from pathlib import Path
from contextlib import asynccontextmanager
from datetime import datetime
from logging.handlers import RotatingFileHandler

from fastapi import FastAPI, HTTPException, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from langserve import add_routes
from langchain_core.runnables import RunnableLambda
from pydantic import BaseModel

from food_analyzer import FoodImageAnalyzer, EdamamFoodSearcher, FoodSearchRequest, NutrientAnalysis


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
CORS_SETTINGS = {
    "allow_origins": ["*"],
    "allow_credentials": True,
    "allow_methods": ["*"],
    "allow_headers": ["*"],
}

FILES_SETTINGS = {
    "temp_dir": "temp_images",
    "allowed_extensions": [".jpg", ".jpeg", ".png", ".gif", ".webp"],
    "max_file_size_mb": 16,
}

ANALYSIS_SETTINGS = {
    "confidence_threshold": 0.0,
    "default_language": "ru",
}

LANGSERVE_SETTINGS = {
    "path": "/langserve",
    "playground_type": "default",
    "enable_feedback_endpoint": False,
}


def load_config(config_path: str = "config.yaml") -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        return config
    except FileNotFoundError:
        raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except yaml.YAMLError as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


def setup_logging(log_config: Dict[str, Any]) -> logging.Logger:
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–∞–π–ª —Å —Ä–æ—Ç–∞—Ü–∏–µ–π."""
    log_file = log_config.get("file", "logs/api_requests.log")
    log_level = log_config.get("level", "INFO")
    max_size_mb = log_config.get("max_size_mb", 50)
    backup_count = log_config.get("backup_count", 5)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    log_dir = Path(log_file).parent
    log_dir.mkdir(parents=True, exist_ok=True)

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = logging.getLogger("chain_server_api")
    logger.setLevel(getattr(logging, log_level.upper()))

    # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    logger.handlers.clear()

    # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä
    formatter = logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S'
    )

    # –§–∞–π–ª–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    max_bytes = max_size_mb * 1024 * 1024  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ú–ë –≤ –±–∞–π—Ç—ã
    file_handler = RotatingFileHandler(
        log_file,
        maxBytes=max_bytes,
        backupCount=backup_count,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)
    logger.addHandler(file_handler)

    # –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—à–∏–±–æ–∫
    console_handler = logging.StreamHandler()
    console_handler.setLevel(logging.ERROR)
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)

    return logger


def create_food_analyzer_with_config(config: Dict[str, Any]) -> FoodImageAnalyzer:
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    image_config = config.get("image_recognition_model", {})

    return FoodImageAnalyzer(
        model_name=image_config.get("model", "gpt-4o"),
        temperature=image_config.get("temperature", 0.1),
        max_tokens=image_config.get("max_tokens", 1000)
    )


def create_nutrients_analyzer_with_config(config: Dict[str, Any]) -> EdamamFoodSearcher:
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    edamam_config = config.get("edamam", {})
    nutrients_config = config.get("analyze_nutrients_model", {})

    return EdamamFoodSearcher(
        app_id=edamam_config.get("app_id"),
        app_key=edamam_config.get("app_key"),
        base_url=edamam_config.get("base_url"),
        timeout=edamam_config.get("timeout", 30),
        max_results=edamam_config.get("max_results", 10),
        model_name=nutrients_config.get("model", "gpt-4o"),
        temperature=nutrients_config.get("temperature", 0.5),
        max_tokens=nutrients_config.get("max_tokens", 800),
        request_timeout=nutrients_config.get("timeout", 45)
    )


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging_config = config.get("logging", {})
api_logger = setup_logging(logging_config)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã —Å–µ—Ä–≤–∏—Å–æ–≤
analyzer: FoodImageAnalyzer | None = None
food_searcher: EdamamFoodSearcher | None = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global analyzer, food_searcher

    # Startup
    api_logger.info("[STARTUP] –ó–∞–ø—É—Å–∫ chain-server...")

    if not os.getenv("OPENAI_API_KEY"):
        api_logger.error("[STARTUP] OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    try:
        analyzer = create_food_analyzer_with_config(config)
        api_logger.info("[STARTUP] ‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
        food_searcher = create_nutrients_analyzer_with_config(config)
        api_logger.info("[STARTUP] ‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

        api_logger.info("[STARTUP] üöÄ Chain-server –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")

    except Exception as e:
        api_logger.error(f"[STARTUP] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–µ—Ä–≤–∏—Å–æ–≤: {str(e)}")
        raise

    yield

    # Shutdown
    api_logger.info("[SHUTDOWN] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã chain-server...")
    analyzer = None
    food_searcher = None
    api_logger.info("[SHUTDOWN] üîÑ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")
    print("üîÑ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω—ã")


class ImageAnalysisRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    image_path: str | None = None
    image_base64: str | None = None
    filename: str | None = None


class ImageAnalysisResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."""
    dishes: list[Dict[str, Any]]
    confidence: float
    error: str | None = None


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
server_config = config.get("server", {})
app = FastAPI(
    title=server_config.get("title", "Food Image Analyzer API"),
    description=server_config.get("description", "API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ–¥—ã —Å –ø–æ–º–æ—â—å—é LangChain –∏ OpenAI"),
    version=server_config.get("version", "1.0.0"),
    lifespan=lifespan,
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_SETTINGS["allow_origins"],
    allow_credentials=CORS_SETTINGS["allow_credentials"],
    allow_methods=CORS_SETTINGS["allow_methods"],
    allow_headers=CORS_SETTINGS["allow_headers"],
)


# Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –≤—Å–µ HTTP –∑–∞–ø—Ä–æ—Å—ã."""
    start_time = time.time()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ
    client_ip = request.client.host if request.client else "unknown"
    method = request.method
    url = str(request.url)
    headers = dict(request.headers)
    user_agent = headers.get("user-agent", "unknown")

    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –∑–∞–ø—Ä–æ—Å–∞
    api_logger.info(f"[REQUEST] {method} {url} from {client_ip} | UA: {user_agent}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å
    try:
        response = await call_next(request)

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_time = time.time() - start_time

        # –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
        api_logger.info(
            f"[RESPONSE] {method} {url} | Status: {response.status_code} | "
            f"Time: {process_time:.3f}s | IP: {client_ip}"
        )

        return response

    except Exception as e:
        process_time = time.time() - start_time
        api_logger.error(
            f"[ERROR] {method} {url} | Error: {str(e)} | "
            f"Time: {process_time:.3f}s | IP: {client_ip}"
        )
        raise




def _save_base64_image(image_base64: str, filename: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    temp_dir = Path(FILES_SETTINGS["temp_dir"])
    temp_dir.mkdir(exist_ok=True)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image –µ—Å–ª–∏ –µ—Å—Ç—å
    if "," in image_base64:
        image_base64 = image_base64.split(",")[1]

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    image_data = base64.b64decode(image_base64)
    temp_path = temp_dir / filename

    with open(temp_path, "wb") as f:
        f.write(image_data)

    return str(temp_path)


@app.post("/analyze", response_model=ImageAnalysisResponse)
async def analyze_image(request: ImageAnalysisRequest) -> ImageAnalysisResponse:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã.

    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å –ø—É—Ç–µ–º –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ base64 –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    api_logger.info(f"[ANALYZE] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è | filename: {request.filename}")

    if analyzer is None:
        api_logger.error("[ANALYZE] –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        raise HTTPException(status_code=500, detail="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        if request.image_path:
            image_path = request.image_path
            api_logger.info(f"[ANALYZE] –ò—Å–ø–æ–ª—å–∑—É—é –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª: {image_path}")
        elif request.image_base64:
            if not request.filename:
                api_logger.error("[ANALYZE] –ù–µ —É–∫–∞–∑–∞–Ω filename –¥–ª—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                raise HTTPException(status_code=400, detail="–î–ª—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–µ–Ω filename")
            image_path = _save_base64_image(request.image_base64, request.filename)
            api_logger.info(f"[ANALYZE] –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_path}")
        else:
            api_logger.error("[ANALYZE] –ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ base64 –¥–∞–Ω–Ω—ã–µ")
            raise HTTPException(status_code=400, detail="–£–∫–∞–∂–∏—Ç–µ image_path –∏–ª–∏ image_base64")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        api_logger.info(f"[ANALYZE] –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {image_path}")
        result = analyzer.analyze_image(image_path)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.get("error"):
            api_logger.error(f"[ANALYZE] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {result['error']}")
        else:
            dishes_count = len(result.get("dishes", []))
            confidence = result.get("confidence", 0)
            api_logger.info(f"[ANALYZE] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω | –±–ª—é–¥: {dishes_count} | —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence:.2%}")

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏
        if request.image_base64:
            try:
                os.remove(image_path)
                api_logger.debug(f"[ANALYZE] –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {image_path}")
            except Exception as cleanup_error:
                api_logger.warning(f"[ANALYZE] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {image_path}: {cleanup_error}")

        return ImageAnalysisResponse(**result)

    except HTTPException:
        raise
    except Exception as e:
        api_logger.error(f"[ANALYZE] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/analyze-nutrients")
async def analyze_nutrients(request: FoodSearchRequest) -> Dict[str, Any]:
    """
    –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –±–ª—é–¥–∞ —á–µ—Ä–µ–∑ Edamam Food Database API.

    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–ª—é–¥–∞

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
    """
    api_logger.info(f"[NUTRIENTS] –ó–∞–ø—Ä–æ—Å –∞–Ω–∞–ª–∏–∑–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ | –±–ª—é–¥–æ: '{request.dish}' | –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {request.amount} {request.unit}")

    if food_searcher is None:
        api_logger.error("[NUTRIENTS] –ü–æ–∏—Å–∫–æ–≤–∏–∫ –µ–¥—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        raise HTTPException(status_code=500, detail="–ü–æ–∏—Å–∫–æ–≤–∏–∫ –µ–¥—ã –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    try:
        result = food_searcher.analyze_dish_nutrients(request.dish, request.amount, request.unit)

        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if result.get("error"):
            api_logger.error(f"[NUTRIENTS] –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –¥–ª—è '{request.dish}': {result['error']}")
        else:
            calories = result.get("calories", 0)
            protein = result.get("protein", 0)
            api_logger.info(f"[NUTRIENTS] –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è '{request.dish}' | –∫–∞–ª–æ—Ä–∏–∏: {calories:.1f} –∫–∫–∞–ª | –±–µ–ª–∫–∏: {protein:.1f} –≥")

        return result
    except Exception as e:
        api_logger.error(f"[NUTRIENTS] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ '{request.dish}': {str(e)}")
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞."""
    status = {
        "status": "healthy",
        "image_analyzer_ready": analyzer is not None,
        "nutrients_analyzer_ready": food_searcher is not None,
        "openai_key_set": bool(os.getenv("OPENAI_API_KEY"))
    }

    api_logger.debug(f"[HEALTH] –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è | image_analyzer: {status['image_analyzer_ready']} | nutrients_analyzer: {status['nutrients_analyzer_ready']}")

    return status


# –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫–∏ –¥–ª—è LangServe
def create_langserve_chain():
    """–°–æ–∑–¥–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –¥–ª—è LangServe."""

    def analyze_wrapper(inputs: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if analyzer is None:
            return {"error": "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

        image_path = inputs.get("image_path")
        if not image_path:
            return {"error": "–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"}

        return analyzer.analyze_image(image_path)

    return RunnableLambda(analyze_wrapper)


def create_nutrient_analysis_chain():
    """–°–æ–∑–¥–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ —á–µ—Ä–µ–∑ Edamam API."""

    def analysis_wrapper(inputs: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –±–ª—é–¥–∞."""
        if food_searcher is None:
            return {"error": "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

        dish = inputs.get("dish")
        amount = inputs.get("amount", 100)
        unit = inputs.get("unit", "–≥—Ä–∞–º–º")

        if not dish:
            return {"error": "–ù–µ —É–∫–∞–∑–∞–Ω–æ –±–ª—é–¥–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}

        result = food_searcher.analyze_dish_nutrients(dish, amount, unit)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –µ—Å—Ç—å (–ª–∏–±–æ nutrients, –ª–∏–±–æ error)
        return result

    return RunnableLambda(analysis_wrapper)


# –î–æ–±–∞–≤–ª—è–µ–º LangServe –º–∞—Ä—à—Ä—É—Ç—ã
add_routes(
    app,
    create_langserve_chain(),
    path=LANGSERVE_SETTINGS["path"],
    playground_type=LANGSERVE_SETTINGS["playground_type"]
)

# –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ø–æ—á–∫—É –∞–Ω–∞–ª–∏–∑–∞ –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—ã—Ö –≤–µ—â–µ—Å—Ç–≤
add_routes(
    app,
    create_nutrient_analysis_chain(),
    path="/analyze-nutrients",
    playground_type=LANGSERVE_SETTINGS["playground_type"]
)


if __name__ == "__main__":
    import uvicorn

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    server_config = config.get("server", {})
    uvicorn.run(
        app,
        host=server_config.get("host", "0.0.0.0"),
        port=server_config.get("port", 8000),
        log_level=server_config.get("log_level", "info")
    )