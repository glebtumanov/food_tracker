"""
LangServe —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ–¥—ã.

–ó–∞–ø—É—Å–∫: python server.py
"""

import os
import base64
import yaml
from typing import Dict, Any
from pathlib import Path
from contextlib import asynccontextmanager

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from langserve import add_routes
from langchain_core.runnables import RunnableLambda
from pydantic import BaseModel

from food_analyzer import FoodImageAnalyzer


# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
CORS_SETTINGS = {
    "allow_origins": ["*"],
    "allow_credentials": True,
    "allow_methods": ["*"],
    "allow_headers": ["*"],
}

FILES_SETTINGS = {
    "temp_dir": "temp_images",
    "allowed_extensions": [".jpg", ".jpeg", ".png", ".gif", ".webp"],
    "max_file_size_mb": 16,
}

ANALYSIS_SETTINGS = {
    "confidence_threshold": 0.0,
    "default_language": "ru",
}

LANGSERVE_SETTINGS = {
    "path": "/langserve",
    "playground_type": "default",
    "enable_feedback_endpoint": False,
}


def load_config(config_path: str = "config.yaml") -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML —Ñ–∞–π–ª–∞."""
    try:
        with open(config_path, 'r', encoding='utf-8') as f:
            config = yaml.safe_load(f)
        return config
    except FileNotFoundError:
        raise FileNotFoundError(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {config_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except yaml.YAMLError as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


def create_food_analyzer_with_config(config: Dict[str, Any]) -> FoodImageAnalyzer:
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    openai_config = config.get("openai", {})

    return FoodImageAnalyzer(
        model_name=openai_config.get("model", "gpt-4o"),
        temperature=openai_config.get("temperature", 0.1),
        max_tokens=openai_config.get("max_tokens", 1000)
    )


# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = load_config()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
analyzer: FoodImageAnalyzer | None = None


@asynccontextmanager
async def lifespan(app: FastAPI):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global analyzer

    # Startup
    if not os.getenv("OPENAI_API_KEY"):
        raise ValueError("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

    analyzer = create_food_analyzer_with_config(config)
    print("‚úÖ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    yield

    # Shutdown
    analyzer = None
    print("üîÑ –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –æ—Ç–∫–ª—é—á–µ–Ω")


class ImageAnalysisRequest(BaseModel):
    """–ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    image_path: str | None = None
    image_base64: str | None = None
    filename: str | None = None


class ImageAnalysisResponse(BaseModel):
    """–ú–æ–¥–µ–ª—å –æ—Ç–≤–µ—Ç–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞."""
    dishes: list[Dict[str, Any]]
    confidence: float
    error: str | None = None


# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
server_config = config.get("server", {})
app = FastAPI(
    title=server_config.get("title", "Food Image Analyzer API"),
    description=server_config.get("description", "API –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –µ–¥—ã —Å –ø–æ–º–æ—â—å—é LangChain –∏ OpenAI"),
    version=server_config.get("version", "1.0.0"),
    lifespan=lifespan,
)

# –î–æ–±–∞–≤–ª—è–µ–º CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=CORS_SETTINGS["allow_origins"],
    allow_credentials=CORS_SETTINGS["allow_credentials"],
    allow_methods=CORS_SETTINGS["allow_methods"],
    allow_headers=CORS_SETTINGS["allow_headers"],
)




def _save_base64_image(image_base64: str, filename: str) -> str:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."""
    temp_dir = Path(FILES_SETTINGS["temp_dir"])
    temp_dir.mkdir(exist_ok=True)

    # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å data:image –µ—Å–ª–∏ –µ—Å—Ç—å
    if "," in image_base64:
        image_base64 = image_base64.split(",")[1]

    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    image_data = base64.b64decode(image_base64)
    temp_path = temp_dir / filename

    with open(temp_path, "wb") as f:
        f.write(image_data)

    return str(temp_path)


@app.post("/analyze", response_model=ImageAnalysisResponse)
async def analyze_image(request: ImageAnalysisRequest) -> ImageAnalysisResponse:
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ–¥—ã.

    Args:
        request: –ó–∞–ø—Ä–æ—Å —Å –ø—É—Ç–µ–º –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏–ª–∏ base64 –¥–∞–Ω–Ω—ã–º–∏

    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if analyzer is None:
        raise HTTPException(status_code=500, detail="–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        if request.image_path:
            image_path = request.image_path
        elif request.image_base64:
            if not request.filename:
                raise HTTPException(status_code=400, detail="–î–ª—è base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω—É–∂–µ–Ω filename")
            image_path = _save_base64_image(request.image_base64, request.filename)
        else:
            raise HTTPException(status_code=400, detail="–£–∫–∞–∂–∏—Ç–µ image_path –∏–ª–∏ image_base64")

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        result = analyzer.analyze_image(image_path)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏
        if request.image_base64:
            try:
                os.remove(image_path)
            except:
                pass

        return ImageAnalysisResponse(**result)

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))





@app.get("/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞."""
    return {
        "status": "healthy",
        "analyzer_ready": analyzer is not None,
        "openai_key_set": bool(os.getenv("OPENAI_API_KEY"))
    }


# –°–æ–∑–¥–∞–µ–º —Ü–µ–ø–æ—á–∫—É –¥–ª—è LangServe
def create_langserve_chain():
    """–°–æ–∑–¥–∞–µ—Ç —Ü–µ–ø–æ—á–∫—É –¥–ª—è LangServe."""

    def analyze_wrapper(inputs: Dict[str, Any]) -> Dict[str, Any]:
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
        if analyzer is None:
            return {"error": "–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"}

        image_path = inputs.get("image_path")
        if not image_path:
            return {"error": "–ù–µ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é"}

        return analyzer.analyze_image(image_path)

    return RunnableLambda(analyze_wrapper)


# –î–æ–±–∞–≤–ª—è–µ–º LangServe –º–∞—Ä—à—Ä—É—Ç—ã
add_routes(
    app,
    create_langserve_chain(),
    path=LANGSERVE_SETTINGS["path"],
    playground_type=LANGSERVE_SETTINGS["playground_type"]
)


if __name__ == "__main__":
    import uvicorn

    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    server_config = config.get("server", {})
    uvicorn.run(
        app,
        host=server_config.get("host", "0.0.0.0"),
        port=server_config.get("port", 8000),
        log_level=server_config.get("log_level", "info")
    )