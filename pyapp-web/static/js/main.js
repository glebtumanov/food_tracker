// -----------------------------------------------------------------------------
// –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
// -----------------------------------------------------------------------------
const dropZone = document.getElementById("dropZone");
const fileInput = document.getElementById("fileInput");
const previewContainer = document.getElementById("previewContainer");
/* –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ –ø—Ä–µ–≤—å—é */
const previewImage = document.getElementById("previewImage");
const analysisResult = document.getElementById("analysisResult");
const analyzeButton = document.getElementById("analyzeButton");
const nutrientsButton = document.getElementById("nutrientsButton");
const nutrientsResult = document.getElementById("nutrientsResult");
const uploadUrl = "/upload";
const saveAnalysisUrl = "/save_analysis";
const analyzeImageUrl = "/analyze_image";
const analyzeNutrientsUrl = "/analyze_nutrients";

// –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∑–∫–∏
let currentUploadId = null;
let currentFilename = null;
let currentAnalysisData = null;

// –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–Ω–æ–ø–æ–∫
const previewCard = previewContainer.querySelector('.card');
const buttonContainer = document.getElementById("buttonContainer");

if (!dropZone || !fileInput || !previewContainer || !previewCard || !buttonContainer || !nutrientsButton || !nutrientsResult) {
  /* DOM –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ ‚Äî –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º */
  throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞");
}

// -----------------------------------------------------------------------------
// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
// -----------------------------------------------------------------------------
function updatePreview(url, uploadId = null) {
  if (!previewImage || !previewCard) return;

  previewImage.src = url;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
  previewCard.style.display = "block";

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
  currentFilename = url.split('/').pop();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º uploadId —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω (–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞)
  if (uploadId) {
    currentUploadId = uploadId;
  } else {
    // –î–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ currentUploadId –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ loadSavedAnalysis
    currentUploadId = null;
  }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞
  if (buttonContainer) {
    buttonContainer.style.display = "block";
  }

  if (analyzeButton) {
    analyzeButton.textContent = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ";
    analyzeButton.disabled = false;
  }

  // –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (nutrientsButton) {
    nutrientsButton.style.display = "inline-block";
    nutrientsButton.style.visibility = "visible";
    nutrientsButton.disabled = true;
    nutrientsButton.textContent = "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
  }

  // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  if (analysisResult) {
    analysisResult.style.display = "none";
    analysisResult.innerHTML = "";
  }

  // –°–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
  if (nutrientsResult) {
    nutrientsResult.style.display = "none";
    nutrientsResult.innerHTML = "";
  }

  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
  if (nutrientsButton) {
    nutrientsButton.style.display = "inline-block";
    nutrientsButton.disabled = true;
    nutrientsButton.textContent = "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ";
  }

  // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞
  currentAnalysisData = null;

  // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  if (currentFilename) {
    loadSavedAnalysis(currentFilename);
  }
}

async function uploadFile(file) {
  const formData = new FormData();
  formData.append("file", file);

  try {
    const response = await fetch(uploadUrl, {
      method: "POST",
      body: formData,
    });

    if (!response.ok) {
      const { error } = await response.json();
      throw new Error(error || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
    }

    const { url, upload_id } = await response.json();
    updatePreview(url, upload_id);
  } catch (err) {
    console.error(err);
    alert(err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
  }
}

function handleFiles(files) {
  if (!files || !files.length) return;

  const [file] = files; // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
  if (file.type.startsWith("image/")) {
    uploadFile(file);
  }
}

// -----------------------------------------------------------------------------
// –°–æ–±—ã—Ç–∏—è drag-and-drop
// -----------------------------------------------------------------------------
["dragenter", "dragover", "dragleave", "drop"].forEach((eventName) => {
  dropZone.addEventListener(eventName, (e) => e.preventDefault(), false);
});

dropZone.addEventListener(
  "dragover",
  () => dropZone.classList.add("bg-secondary-subtle"),
  false,
);

dropZone.addEventListener(
  "dragleave",
  () => dropZone.classList.remove("bg-secondary-subtle"),
  false,
);

dropZone.addEventListener(
  "drop",
  (e) => {
    dropZone.classList.remove("bg-secondary-subtle");
    if (e.dataTransfer?.files) {
      handleFiles(e.dataTransfer.files);
    }
  },
  false,
);

// -----------------------------------------------------------------------------
// –ö–ª–∏–∫ –ø–æ –∑–æ–Ω–µ
// -----------------------------------------------------------------------------
dropZone.addEventListener("click", () => fileInput.click());
fileInput.addEventListener("change", () => {
  if (fileInput.files) {
    handleFiles(fileInput.files);
    fileInput.value = ""; // —Å–±—Ä–æ—Å
  }
});

// -----------------------------------------------------------------------------
// Paste –∏–∑ –±—É—Ñ–µ—Ä–∞ –æ–±–º–µ–Ω–∞
// -----------------------------------------------------------------------------
window.addEventListener("paste", (e) => {
  if (e.clipboardData) {
    const items = e.clipboardData.files;
    if (items.length) {
      handleFiles(items);
    }
  }
});

// -----------------------------------------------------------------------------
// –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞
// -----------------------------------------------------------------------------
async function loadSavedAnalysis(filename) {
  try {
    const response = await fetch(`/get_analysis/${filename}`);
    if (response.ok) {
      const data = await response.json();

      // –í—Å–µ–≥–¥–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º upload_id, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
      if (data.upload_id) {
        currentUploadId = data.upload_id;
      }

      if (data.ingredients_md && data.ingredients_md.trim()) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º markdown –≤ HTML
        const htmlText = formatMarkdownToHtml(data.ingredients_md);

        if (analysisResult) {
          analysisResult.innerHTML = htmlText;
          analysisResult.style.display = "block";
        }

        if (analyzeButton) {
          analyzeButton.textContent = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ";
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ JSON –¥–∞–Ω–Ω—ã–µ, –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
        if (data.ingredients_json && nutrientsButton) {
          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ ingredients_json —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
            if (typeof data.ingredients_json === 'string') {
              currentAnalysisData = JSON.parse(data.ingredients_json);
            } else {
              currentAnalysisData = data.ingredients_json;
            }
            if (currentAnalysisData.dishes && currentAnalysisData.dishes.length > 0) {
              nutrientsButton.disabled = false;
              nutrientsButton.textContent = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã";
            }
          } catch (e) {
            console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–∞–Ω–Ω—ã—Ö:", e);
          }
        }
      }
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:", err);
  }
}

async function saveAnalysis(ingredients_md, ingredients_json = null) {
  if (!currentUploadId) {
    console.error("–ù–µ—Ç ID –∑–∞–≥—Ä—É–∑–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
    return;
  }

  try {
    const response = await fetch(saveAnalysisUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        upload_id: currentUploadId,
        ingredients_md: ingredients_md,
        ingredients_json: ingredients_json
      }),
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(errorData.error || "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è");
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞:", err);
  }
}

// -----------------------------------------------------------------------------
// –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ chain-—Å–µ—Ä–≤–µ—Ä
// -----------------------------------------------------------------------------
function formatMarkdownToHtml(markdownText) {
  return markdownText
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/_(.*?)_/g, '<em>$1</em>')
    .replace(/\n/g, '<br>');
}

function renderAnalysisResult(analysis) {
  if (!analysisResult) return;

  const { dishes, confidence } = analysis;

  let html = '<div class="analysis-result">';
  html += '<h5 class="mb-3">üçΩÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞</h5>';

  // –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  html += '<div class="row mb-3">';
  html += `<div class="col-md-12"><strong>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</strong> ${(confidence * 100).toFixed(1)}%</div>`;
  html += '</div>';

  // –°–ø–∏—Å–æ–∫ –±–ª—é–¥
  if (dishes && dishes.length > 0) {
    html += '<h6 class="mb-2">–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –±–ª—é–¥–∞:</h6>';
    html += '<div class="list-group">';

    dishes.forEach((dish, index) => {
      const name = dish.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ';
      const name_en = dish.name_en || '';
      const description = dish.description || '';
      const description_en = dish.description_en || '';
      const unit_type = dish.unit_type || '';
      const amount = dish.amount || 0;

      html += '<div class="list-group-item">';
      html += `<div class="d-flex w-100 justify-content-between">`;
      html += `<h6 class="mb-1">${index + 1}. ${name}`;
      if (name_en) {
        html += ` <em class="text-muted">${name_en}</em>`;
      }
      html += '</h6>';

      if (unit_type && amount) {
        if (unit_type === '—à—Ç—É–∫') {
          html += `<small><strong>${amount.toFixed(0)} ${unit_type}</strong></small>`;
        } else {
          html += `<small><strong>${amount} ${unit_type}</strong></small>`;
        }
      }
      html += '</div>';

      if (description) {
        html += `<p class="mb-1 text-muted">${description}`;
        if (description_en) {
          html += ` <em>${description_en}</em>`;
        }
        html += '</p>';
      }
      html += '</div>';
    });

    html += '</div>';
  }

  html += '</div>';

    analysisResult.innerHTML = html;
  analysisResult.style.display = "block";
}

async function analyzeImage() {
  if (!analyzeButton || !analysisResult || !currentUploadId) return;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  analyzeButton.textContent = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...";
  analyzeButton.disabled = true;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  analysisResult.innerHTML = `
    <div class="text-center p-4">
      <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...</span>
      </div>
      <p class="mt-2 text-muted">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò...</p>
    </div>
  `;
  analysisResult.style.display = "block";

  try {
    const response = await fetch(analyzeImageUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        upload_id: currentUploadId
      }),
    });

    const data = await response.json();

        if (response.ok && data.success) {
      // –£—Å–ø–µ—à–Ω—ã–π –∞–Ω–∞–ª–∏–∑
      currentAnalysisData = data.analysis;
      renderAnalysisResult(data.analysis);
      analyzeButton.textContent = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ";

                  // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –±–ª—é–¥–∞
      if (nutrientsButton) {
        if (data.analysis.dishes && data.analysis.dishes.length > 0) {
          nutrientsButton.disabled = false;
          nutrientsButton.textContent = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã";
        } else {
          nutrientsButton.disabled = true;
          nutrientsButton.textContent = "–ë–ª—é–¥–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã";
        }
      }
    } else {
      // –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞
      const errorMsg = data.error || "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ";
      analysisResult.innerHTML = `
        <div class="alert alert-danger" role="alert">
          <h6 class="alert-heading">‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞</h6>
          <p class="mb-0">${errorMsg}</p>
        </div>
      `;
      analyzeButton.textContent = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ";
    }
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ:", err);
    analysisResult.innerHTML = `
      <div class="alert alert-danger" role="alert">
        <h6 class="alert-heading">‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è</h6>
        <p class="mb-0">–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
      </div>
    `;
          analyzeButton.textContent = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –µ–¥—É –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ";
  } finally {
    analyzeButton.disabled = false;
  }
}

// -----------------------------------------------------------------------------
// –ê–Ω–∞–ª–∏–∑ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
// -----------------------------------------------------------------------------
async function analyzeNutrients() {
  if (!nutrientsButton || !nutrientsResult || !currentAnalysisData) return;

  const dishes = currentAnalysisData.dishes;
  if (!dishes || dishes.length === 0) {
    return;
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
  nutrientsButton.textContent = "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º...";
  nutrientsButton.disabled = true;

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  nutrientsResult.innerHTML = `
    <div class="text-center p-4">
      <div class="spinner-border text-success" role="status">
        <span class="visually-hidden">–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã...</span>
      </div>
      <p class="mt-2 text-muted">–û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–ª—é–¥...</p>
    </div>
  `;
  nutrientsResult.style.display = "block";

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –≤—Å–µ—Ö –±–ª—é–¥
    const nutrientPromises = dishes.map(dish => {
      const requestData = {
        dish: dish.name_en || dish.name, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Ä—É—Å—Å–∫–æ–µ
        amount: dish.amount || 100,
        unit: dish.unit_type === "—à—Ç—É–∫" ? "–≥—Ä–∞–º–º" :
              dish.unit_type === "–∫—É—Å–æ–∫" ? "–≥—Ä–∞–º–º" :
              dish.unit_type === "–ª–æ–º—Ç–∏–∫" ? "–≥—Ä–∞–º–º" :
              dish.unit_type === "—á–∞—à–∫–∞" ? "–≥—Ä–∞–º–º" : "–≥—Ä–∞–º–º"
      };

      return fetch(analyzeNutrientsUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(requestData),
      });
    });

    // –ñ–¥–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
    const responses = await Promise.all(nutrientPromises);

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const nutrientResults = [];
    for (let i = 0; i < responses.length; i++) {
      const response = responses[i];
      const dish = dishes[i];

      if (response.ok) {
        const data = await response.json();
        if (data.error) {
          nutrientResults.push({
            dish: dish,
            error: data.error
          });
        } else {
          nutrientResults.push({
            dish: dish,
            nutrients: data
          });
        }
      } else {
        nutrientResults.push({
          dish: dish,
          error: `–û—à–∏–±–∫–∞ HTTP: ${response.status}`
        });
      }
    }

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    renderNutrientResults(nutrientResults);
    nutrientsButton.textContent = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã";

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤:", err);
    nutrientsResult.innerHTML = `
      <div class="alert alert-danger" role="alert">
        <h6 class="alert-heading">‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤</h6>
        <p class="mb-0">–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–∏—Ç–∞—Ç–µ–ª—å–Ω—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–ª—é–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.</p>
      </div>
    `;
    nutrientsButton.textContent = "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω—É—Ç—Ä–∏–µ–Ω—Ç—ã";
  } finally {
    nutrientsButton.disabled = false;
  }
}

function renderNutrientResults(results) {
  if (!nutrientsResult) return;

  let html = '<div class="nutrients-results">';
  html += '<h5 class="mb-3">ü•ó –ü–∏—Ç–∞—Ç–µ–ª—å–Ω–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å –±–ª—é–¥</h5>';

  results.forEach((result, index) => {
    const dish = result.dish;

    html += '<div class="nutrient-item">';
    html += `<h6>${dish.name}`;
    if (dish.amount && dish.unit_type) {
      html += ` (${dish.amount} ${dish.unit_type})`;
    }
    html += '</h6>';

    if (result.error) {
      html += `<div class="alert alert-warning mb-0" role="alert">
        <small>–û—à–∏–±–∫–∞: ${result.error}</small>
      </div>`;
    } else if (result.nutrients) {
      const nutrients = result.nutrients;
      html += '<div class="nutrient-stats">';

      if (nutrients.calories !== undefined) {
        html += `<div class="nutrient-stat">
          <span class="label">–ö–∞–ª–æ—Ä–∏–∏</span>
          <span class="value">${nutrients.calories.toFixed(1)} –∫–∫–∞–ª</span>
        </div>`;
      }

      if (nutrients.protein !== undefined) {
        html += `<div class="nutrient-stat">
          <span class="label">–ë–µ–ª–∫–∏</span>
          <span class="value">${nutrients.protein.toFixed(1)} –≥</span>
        </div>`;
      }

      if (nutrients.fat !== undefined) {
        html += `<div class="nutrient-stat">
          <span class="label">–ñ–∏—Ä—ã</span>
          <span class="value">${nutrients.fat.toFixed(1)} –≥</span>
        </div>`;
      }

      if (nutrients.carbohydrates !== undefined) {
        html += `<div class="nutrient-stat">
          <span class="label">–£–≥–ª–µ–≤–æ–¥—ã</span>
          <span class="value">${nutrients.carbohydrates.toFixed(1)} –≥</span>
        </div>`;
      }

      if (nutrients.fiber !== undefined) {
        html += `<div class="nutrient-stat">
          <span class="label">–ö–ª–µ—Ç—á–∞—Ç–∫–∞</span>
          <span class="value">${nutrients.fiber.toFixed(1)} –≥</span>
        </div>`;
      }

      html += '</div>';
    }

    html += '</div>';
  });

  html += '</div>';

  nutrientsResult.innerHTML = html;
  nutrientsResult.style.display = "block";
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞
if (analyzeButton) {
  analyzeButton.addEventListener("click", analyzeImage);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
if (nutrientsButton) {
  nutrientsButton.addEventListener("click", analyzeNutrients);
}

// -----------------------------------------------------------------------------
// –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º)
// -----------------------------------------------------------------------------
if (window.PRELOAD_URL) {
  updatePreview(window.PRELOAD_URL);
}